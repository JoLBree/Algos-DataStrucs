//
// EVENTLIST.JAVA
// Skeleton code for your EventList collection type.
//
import java.util.*;

class EventList {

	Random randseq;
	int maxHeight;
	EventNode head;
	EventNode tail;
	////////////////////////////////////////////////////////////////////
	// Here's a suitable geometric random number generator for choosing
	// pillar heights.  We use Java's ability to generate random booleans
	// to simulate coin flips.
	////////////////////////////////////////////////////////////////////

	int randomHeight()
	{
		int v = 1;
		while (randseq.nextBoolean()) { v++; }
		return v;
	}


	//
	// Constructor
	//
	public EventList()
	{
		randseq = new Random(58243); // You may seed the PRNG however you like.
		head = new EventNode(1000, new Event(-9999, "head"));
		tail = new EventNode(1000, new Event(9999, "tail"));
		for (int i = 0; i < head.height; i++){
			head.next[i] = tail;
		}
		for (int i = 0; i < tail.height; i++){
			tail.prev[i] = head;
		}
		maxHeight = 0;
	}


	//
	// Add an Event to the list.
	//
	public void insert(Event e)
	{
		// determine location
		int t = randomHeight();
		EventNode z = new EventNode(t, e);
		
		int l = maxHeight;
		EventNode x = head;
		EventNode y;
		while (l >= 0){
			y = x.next[l];
			if (y.key == e.year){
				y.events.add(e); // do duplicate
				return;
			}
			else if (y.key < e.year){
				x = y;
			}
			else{ // we've found the place to insert it. link it at this level.
				if (l < t){
					z.prev[l] = x;
					z.next[l] = y;
				}
				l--;
			}
		}
		
	}


	//
	// Remove all Events in the list with the specified year.
	//
	public void remove(int year)
	{

	}

	//
	// Find all events with greatest year <= input year
	//
	public Event [] findMostRecent(int year)
	{
		return null;
	}


	//
	// Find all Events within the specific range of years (inclusive).
	//
	public Event [] findRange(int first, int last)
	{
		return null;
	}
}
