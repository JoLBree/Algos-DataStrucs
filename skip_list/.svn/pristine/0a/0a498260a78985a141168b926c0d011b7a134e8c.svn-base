//
// EVENTLIST.JAVA
// Skeleton code for your EventList collection type.
//
import java.util.*;

class EventList {

	Random randseq;
	int maxHeight;
	EventNode head;
	EventNode tail;
	////////////////////////////////////////////////////////////////////
	// Here's a suitable geometric random number generator for choosing
	// pillar heights.  We use Java's ability to generate random booleans
	// to simulate coin flips.
	////////////////////////////////////////////////////////////////////

	int randomHeight()
	{
		int v = 1;
		while (randseq.nextBoolean()) { v++; }
		return v;
	}
	
	public static void main(String[] args) {
		EventList myList = new EventList();
		myList.insert(new Event(1999, "hi"));
		System.out.println(myList.head.next[0].key);
		//System.out.println(myList);
	}



	//
	// Constructor
	//
	public EventList()
	{
		randseq = new Random(58243); // You may seed the PRNG however you like.
		head = new EventNode(1000, new Event(-9999, "head"));
		tail = new EventNode(1000, new Event(9999, "tail"));
		for (int i = 0; i < head.height; i++){
			head.next[i] = tail;
		}
		for (int i = 0; i < tail.height; i++){
			tail.prev[i] = head;
		}
		maxHeight = 0;
	}


	//
	// Add an Event to the list.
	//
	public void insert(Event e)
	{
		// determine location
		int t = randomHeight();
		EventNode z = new EventNode(t, e);
		int oldMax = 0;
		if (t > maxHeight) {
			oldMax = maxHeight;
			maxHeight = t;
		}
		int l = maxHeight;
		EventNode x = head;
		EventNode y;
		while (l >= 0){
			y = x.next[l];
			if (y.key == e.year){
				maxHeight = oldMax;
				y.events.add(e); // do duplicate
				return;
			}
			else if (y.key < e.year){
				x = y;
			}
			else{ // we've found the place to insert it. link it at this level.
				if (l < t){
					z.prev[l] = x;
					z.next[l] = y;
					x.next[l] = z;
					y.prev[l] = z;
				}
				l--;
			}
		}
	}


	//
	// Remove all Events in the list with the specified year.
	//
	public void remove(int year)
	{
		int l = maxHeight;
		EventNode x = head;
		EventNode y;
		while (l >= 0){
			y = x.next[l];
			if (y.key == year){ // found it, remove
				for (int i = 0; i < y.height; i++){
					y.prev[i].next[i] = y.next[i];
					y.next[i].prev[i] = y.prev[i];
				}
				return;
			}
			else if (y.key < year){
				x = y;
			}
			else l--;
		}
	}

	//
	// Find all events with greatest year <= input year
	//
	public Event [] findMostRecent(int year)
	{
		int l = maxHeight;
		EventNode x = head;
		EventNode y;
		while (l >= 0){
			y = x.next[l];
			if (y.key == year){ // found it
				Event[] es = (Event[]) y.events.toArray();
				return es;
			}
			if (y.key < year){
				x = y;
			}
			else l--;
		}
		Event[] es = (Event[]) x.events.toArray();
		return es;
	}


	//
	// Find all Events within the specific range of years (inclusive).
	//
	public Event [] findRange(int first, int last)
	{
		boolean startFound = false;
		int l = maxHeight;
		EventNode start;
		EventNode x = head;
		EventNode y;
		while (l >= 0 && !startFound){
			y = x.next[l];
			if (y.key == first){ // found it, remove
				start = y;
				startFound = true;
			}
			if (y.key < first){
				x = y;
			}
			else l--;
		}
		start = x.next[0];
		LinkedList<Event> list = start.events;
		x = start;
		while (x.key <= last){
			for (Event e : x.events){
				list.add(e);
			}
			x = x.next[0];
		}

		return (Event[]) list.toArray();

	}
	
	public String toString()
	{
		String toString = "";
		EventNode x = head;
		EventNode y = x.next[0];
		while (y.key != 9999){
			toString = toString + Integer.toString(x.key) + ", ";
		}
		return toString;
	}
	
	
	
	
}
